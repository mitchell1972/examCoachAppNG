import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

interface PrivateRouteProps {
  children: React.ReactNode;
}

export default function PrivateRoute({ children }: PrivateRouteProps) {
  const { user, loading } = useAuth();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return user ? <>{children}</> : <Navigate to="/login" replace />;
}import React from 'react';
import { Crown, Clock } from 'lucide-react';
import { useSubscription } from '../hooks/useSubscription';

export default function SubscriptionBadge() {
  const { getSubscriptionStatus, getRemainingFreeQuestions, loading } = useSubscription();

  if (loading) {
    return (
      <div className="flex items-center px-2 py-1 rounded-full bg-gray-100">
        <div className="animate-pulse h-3 w-3 bg-gray-300 rounded-full mr-1"></div>
        <span className="text-xs text-gray-500">Loading...</span>
      </div>
    );
  }

  const status = getSubscriptionStatus();
  const remaining = getRemainingFreeQuestions();
--
  }
}import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

interface PublicRouteProps {
  children: React.ReactNode;
}

export default function PublicRoute({ children }: PublicRouteProps) {
  const { user, loading } = useAuth();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return user ? <Navigate to="/dashboard" replace /> : <>{children}</>;
}import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import toast from 'react-hot-toast';

export default function LoginPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const { signIn } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!email || !password) {
      toast.error('Please fill in all fields');
      return;
    }
--
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={loading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? (
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
              ) : (
                'Sign in'
              )}
            </button>
          </div>

          <div className="text-center">
            <Link to="/" className="text-sm text-blue-600 hover:text-blue-500">
              ← Back to home
--
  const topic = searchParams.get('topic');
  const { user } = useAuth();
  const { checkQuestionAccess, freeQuestionsUsed, FREE_QUESTIONS_LIMIT, refreshSubscription } = useSubscription();
  
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [userAnswers, setUserAnswers] = useState<Record<string, 'A' | 'B' | 'C' | 'D'>>({});
  const [questionStartTime, setQuestionStartTime] = useState<number>(Date.now());
  const [sessionStartTime] = useState<number>(Date.now());
  const [showResults, setShowResults] = useState(false);
  const [submittedAnswers, setSubmittedAnswers] = useState<Record<string, any>>({});
  const [loading, setLoading] = useState(false);
  const [showPaywall, setShowPaywall] = useState(false);

  // Fetch questions
  const { data: questions = [], isLoading } = useQuery({
    queryKey: ['practiceQuestions', subject, topic],
    queryFn: () => {
      if (!subject) return [];
      
      // Try daily questions first, then fallback to general questions
      return getDailyQuestions(subject).then(dailyQuestions => {
--
                <ArrowLeftIcon className="h-4 w-4 mr-2" />
                Previous
              </button>
              
              <span className="text-sm text-gray-500">
                {currentQuestion.topic} • Difficulty: {currentQuestion.difficulty_level}/3
              </span>
              
              <button
                onClick={handleNextQuestion}
                disabled={!userAnswers[currentQuestion.id] || loading}
                className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? (
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                ) : (
                  <ArrowRightIcon className="h-4 w-4 mr-2" />
                )}
                {currentQuestionIndex === questions.length - 1 ? 'Finish' : 'Next'}
              </button>
            </div>
          </div>
        </div>
      )}
--
      'Advanced study recommendations',
      '2 months free compared to monthly billing'
    ],
    popular: true
  }
];

export default function PricingPage() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [loading, setLoading] = useState<string | null>(null);
  const [subscription, setSubscription] = useState<any>(null);

  useEffect(() => {
    checkSubscriptionStatus();
    handlePaymentResult();
  }, [user]);

  const checkSubscriptionStatus = async () => {
    if (!user) return;

--
                  {plan.features.map((feature) => (
                    <li key={feature} className="flex items-start">
                      <CheckCircle className="flex-shrink-0 h-5 w-5 text-green-400" />
                      <span className="ml-3 text-sm text-gray-700">{feature}</span>
                    </li>
                  ))}
                </ul>

                <button
                  onClick={() => handleSubscribe(plan.type)}
                  disabled={loading === plan.type}
                  className={`mt-8 w-full flex justify-center items-center px-4 py-3 border border-transparent rounded-md shadow-sm text-base font-medium text-white ${
                    plan.popular
                      ? 'bg-blue-600 hover:bg-blue-700'
                      : 'bg-gray-800 hover:bg-gray-900'
                  } disabled:opacity-50 disabled:cursor-not-allowed transition-colors`}
                >
                  {loading === plan.type ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                      Processing...
                    </>
                  ) : (
                    <>
                      <CreditCard className="h-5 w-5 mr-2" />
                      Subscribe to {plan.name}
                    </>
                  )}
--
  'English Language': ['Grammar', 'Comprehension', 'Summary', 'Essay Writing', 'Oral English']
};

export default function PracticePage() {
  const [selectedSubject, setSelectedSubject] = useState<string>('');
  const [selectedTopic, setSelectedTopic] = useState<string>('');
  const [difficultyLevel, setDifficultyLevel] = useState<number>(1);
  const { 
    getSubscriptionStatus, 
    getRemainingFreeQuestions, 
    loading: subscriptionLoading 
  } = useSubscription();

  // Fetch questions when subject/topic changes
  const { data: questions = [], isLoading } = useQuery({
    queryKey: ['questions', selectedSubject, selectedTopic],
    queryFn: () => getQuestionsBySubjectAndTopic(selectedSubject, selectedTopic),
    enabled: !!selectedSubject
  });

  const handleSubjectChange = (subject: string) => {
--
export default function ProfilePage() {
  const { user, profile, refreshProfile } = useAuth();
  const [editing, setEditing] = useState(false);
  const [formData, setFormData] = useState({
    full_name: profile?.full_name || '',
    school_name: profile?.school_name || '',
    state: profile?.state || '',
    target_score: profile?.target_score || 300,
    preferred_subjects: profile?.preferred_subjects || []
  });
  const [loading, setLoading] = useState(false);

  // Fetch user progress
  const { data: userProgress = [], isLoading: progressLoading } = useQuery({
    queryKey: ['userProgress', user?.id],
    queryFn: () => user ? getUserProgress(user.id) : [],
    enabled: !!user
  });

  // Fetch performance analysis
  const { data: performanceAnalysis, isLoading: analysisLoading } = useQuery({
--
                  type="button"
                  onClick={handleCancel}
                  className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                >
                  <XIcon className="h-4 w-4 mr-2" />
                  Cancel
                </button>
                <button
                  type="button"
                  onClick={handleSave}
                  disabled={loading}
                  className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50"
                >
                  {loading ? (
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  ) : (
                    <SaveIcon className="h-4 w-4 mr-2" />
                  )}
                  Save Changes
                </button>
              </div>
            </form>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
--

export default function RegisterPage() {
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    fullName: '',
    schoolName: '',
    state: ''
  });
  const [loading, setLoading] = useState(false);
  const { signUp } = useAuth();
  const navigate = useNavigate();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

--
                    {state}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={loading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? (
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
              ) : (
                'Create Account'
              )}
            </button>
          </div>

          <div className="text-center">
            <Link to="/" className="text-sm text-blue-600 hover:text-blue-500">
              ← Back to home
--

interface UserProgress {
  total_questions_attempted: number;
  subject: string;
}

export function useSubscription() {
  const { user } = useAuth();
  const [subscription, setSubscription] = useState<SubscriptionData | null>(null);
  const [userProgress, setUserProgress] = useState<UserProgress[]>([]);
  const [loading, setLoading] = useState(true);
  const [freeQuestionsUsed, setFreeQuestionsUsed] = useState(0);
  const [isSubscribed, setIsSubscribed] = useState(false);
  const [canAccessQuestions, setCanAccessQuestions] = useState(true);

  const FREE_QUESTIONS_LIMIT = 25; // 5 per subject

  useEffect(() => {
    if (user) {
      fetchSubscriptionData();
    } else {
--
  const refreshSubscription = async () => {
    await fetchSubscriptionData();
  };

  const getRemainingFreeQuestions = () => {
    if (isSubscribed) return Infinity;
    return Math.max(0, FREE_QUESTIONS_LIMIT - freeQuestionsUsed);
  };

  const getSubscriptionStatus = () => {
    if (loading) return 'loading';
    if (isSubscribed) return 'premium';
    if (freeQuestionsUsed >= FREE_QUESTIONS_LIMIT) return 'expired';
    return 'free';
  };

  const checkQuestionAccess = (questionsToAccess: number = 1) => {
    if (isSubscribed) return { canAccess: true, reason: null };
    
    const remaining = getRemainingFreeQuestions();
    if (remaining >= questionsToAccess) {
--
    return {
      canAccess: false,
      reason: 'free_limit_exceeded',
      message: 'You\'ve used all your free questions. Subscribe to continue practicing.'
    };
  };

  return {
    subscription,
    userProgress,
    loading,
    isSubscribed,
    freeQuestionsUsed,
    canAccessQuestions,
    refreshSubscription,
    getRemainingFreeQuestions,
    getSubscriptionStatus,
    checkQuestionAccess,
    FREE_QUESTIONS_LIMIT
  };
}import React, { createContext, useContext, useEffect, useState } from 'react';
import { User } from '@supabase/supabase-js';
import { supabase, getCurrentUser, Profile, getUserProfile } from '../lib/supabase';
import toast from 'react-hot-toast';

interface AuthContextType {
  user: User | null;
  profile: Profile | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signUp: (email: string, password: string, userData: { full_name: string; school_name?: string; state?: string }) => Promise<void>;
  signOut: () => Promise<void>;
  refreshProfile: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<Profile | null>(null);
  const [loading, setLoading] = useState(true);

  // Load user on mount
  useEffect(() => {
    async function loadUser() {
      try {
        const currentUser = await getCurrentUser();
        setUser(currentUser);
        
        if (currentUser) {
          const userProfile = await getUserProfile(currentUser.id);
          setProfile(userProfile);
        }
      } catch (error) {
        console.error('Error loading user:', error);
      } finally {
        setLoading(false);
      }
    }
    
    loadUser();

    // Set up auth listener
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (_event, session) => {
--
      toast.success('Successfully signed out!');
    } catch (error: any) {
      toast.error(error.message || 'Failed to sign out');
      throw error;
    }
  };

  const value = {
    user,
    profile,
    loading,
    signIn,
    signUp,
    signOut,
    refreshProfile
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
